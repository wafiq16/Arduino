/*
MIT License

Copyright (c) 2018 Brian T. Park

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef ACE_SEGMENT_MERGED_DIGIT_DRIVER_H
#define ACE_SEGMENT_MERGED_DIGIT_DRIVER_H

#include <stdint.h>
#include "LedMatrixFullSpi.h"
#include "Driver.h"

namespace ace_segment {

class DimmablePattern;

/**
 * An LED Driver that assumes that the resistors are on the segments so the
 * multiplexing occurs by scanning through the digits. Both the segment pins on
 * the LED and the digit pins are both controlled by an 74HC595 chip which is
 * configured through SPI. The transition from LOW to HIGH on the ST_CK pin
 * (tied to the SPI SS) pin sets the output pins to the shift register pins
 * instantly. So unlike SplitDigitDriver, we don't bother making sure that the
 * previous digit is turned off before activating the next digit.
 */
class MergedDigitDriver: public Driver {
  public:
    /**
     * Constructor.
     *
     * @param ledMatrix instance of LedMatrix that understanding the wiring
     * @param dimmablePatterns array of digit patterns
     * @param numDigits number of dimmablePatterns
     * @param numSubFields split a single frame into this many fields so that we
     *   can control its apparent brightness
     */
    explicit MergedDigitDriver(
        LedMatrixFullSpi* ledMatrix,
        DimmablePattern* dimmablePatterns,
        uint8_t numDigits,
        uint8_t numSubFields
    ) :
        Driver(ledMatrix, dimmablePatterns, numDigits),
        mNumSubFields(numSubFields)
    {}

    void configure() override {
      Driver::configure();
      mCurrentDigit = 0;
    }

    uint16_t getFieldsPerFrame() override {
      return mNumDigits * mNumSubFields;
    }

    bool isBrightnessSupported() override { return mNumSubFields > 1; }

    void displayCurrentField() override;

    void prepareToSleep() override;

  protected:
    /** If this is greater than 1, use displayCurrentFieldModulated(). */
    uint8_t const mNumSubFields;

    /**
     * Within the displayCurrentField() method, mCurrentDigit is the current
     * digit that is being drawn. It is incremented to the next digit just
     * before returning from that method.
     */
    uint8_t mCurrentDigit;

    /**
     * Within the displayCurrentField() method, the mPrevDigit is the digit
     * that was displayed on the previous call to displayCurrentField(). It is
     * set to the digit that was just displayed before returning. It will be
     * equal to mCurrentDigit when multiple fields are drawn for the same
     * digit.
     */
    uint8_t mPrevDigit;

    /**
     * Used by displayCurrentFieldModulated() and subclasses generated by
     * fast_driver.py.
     */
    uint8_t mCurrentSubField;

    /**
     * Used by displayCurrentFieldModulated() and subclasses generated by
     * fast_driver.py
     */
    uint8_t mCurrentSubFieldMax;

    /**
     * The segment pattern that is currently displaying on the LED. Used to
     * optimize the displayCurrentFieldModulated() method if the current
     * pattern is the same as the previous pattern.
     */
    SegmentPatternType mSegmentPattern;

    /**
     * The digit pattern currently displaying on the LED. Used to optimize the
     * displayCurrentFieldModulated() method.
     */
    DigitPatternType mDigitPattern;

  private:
    // disable copy-constructor and assignment operator
    MergedDigitDriver(const MergedDigitDriver&) = delete;
    MergedDigitDriver& operator=(const MergedDigitDriver&) = delete;

    /** Display field normally without modulation. */
    void displayCurrentFieldPlain();

    /** Display field using subfield modulation. */
    void displayCurrentFieldModulated();
};

}

#endif
