// This file was generated by the following script:
//   ../../tools/fast_driver.py --digit_pins 12 14 15 16 --segment_direct_pins 4 5 6 7 8 9 10 11 --class_name FastDirectDriver --output_files
//
// DO NOT EDIT

#ifdef __AVR__

#include <stdint.h>
#include <digitalWriteFast.h>
#include <ace_segment/SplitDigitDriver.h>

#ifndef ACE_SEGMENT_FastDirectDriver_H
#define ACE_SEGMENT_FastDirectDriver_H

class FastDirectDriver: public ace_segment::SplitDigitDriver {
  public:
    // Constructor
    FastDirectDriver(ace_segment::DimmablePattern* dimmablePatterns,
            uint8_t numDigits, uint8_t numSubFields):
        ace_segment::SplitDigitDriver(
            nullptr /* ledMatrix */, dimmablePatterns, numDigits, numSubFields)
    {}

    // Destructor
    ~FastDirectDriver() override {}

    void configure() override;
    void finish() override;
    void displayCurrentField() override;
    void prepareToSleep() override;

  private:
    typedef void (*DigitalWriter)(void);

    static const uint8_t kNumSegments = 8;

    // define pin values depending on common cathode or anode wiring
    static const uint8_t kDigitOn = LOW;
    static const uint8_t kDigitOff = HIGH;
    static const uint8_t kSegmentOn = HIGH;
    static const uint8_t kSegmentOff = LOW;

    static const uint8_t kSegmentPins[];
    static const uint8_t kDigitPins[];
    static const DigitalWriter kSegmentWriters[];
    static const DigitalWriter kDigitWriters[];

    static void disableDigit(uint8_t digit) {
      uint8_t index = digit * 2 + kDigitOff;
      DigitalWriter writer = kDigitWriters[index];
      writer();
    }

    static void enableDigit(uint8_t digit) {
      uint8_t index = digit * 2 + kDigitOn;
      DigitalWriter writer = kDigitWriters[index];
      writer();
    }

    static void writeSegment(uint8_t segment, uint8_t value) {
      uint8_t index = segment * 2 + value;
      DigitalWriter writer = kSegmentWriters[index];
      writer();
    }

    static void drawSegments(uint8_t pattern);

    // DigitalWriter functions for writing segment pins.
    static void digitalWriteFastSegment00Low() { digitalWriteFast(4, LOW); }
    static void digitalWriteFastSegment00High() { digitalWriteFast(4, HIGH); }
    static void digitalWriteFastSegment01Low() { digitalWriteFast(5, LOW); }
    static void digitalWriteFastSegment01High() { digitalWriteFast(5, HIGH); }
    static void digitalWriteFastSegment02Low() { digitalWriteFast(6, LOW); }
    static void digitalWriteFastSegment02High() { digitalWriteFast(6, HIGH); }
    static void digitalWriteFastSegment03Low() { digitalWriteFast(7, LOW); }
    static void digitalWriteFastSegment03High() { digitalWriteFast(7, HIGH); }
    static void digitalWriteFastSegment04Low() { digitalWriteFast(8, LOW); }
    static void digitalWriteFastSegment04High() { digitalWriteFast(8, HIGH); }
    static void digitalWriteFastSegment05Low() { digitalWriteFast(9, LOW); }
    static void digitalWriteFastSegment05High() { digitalWriteFast(9, HIGH); }
    static void digitalWriteFastSegment06Low() { digitalWriteFast(10, LOW); }
    static void digitalWriteFastSegment06High() { digitalWriteFast(10, HIGH); }
    static void digitalWriteFastSegment07Low() { digitalWriteFast(11, LOW); }
    static void digitalWriteFastSegment07High() { digitalWriteFast(11, HIGH); }

    // DigitalWriter functions for writing digit pins.
    static void digitalWriteFastDigit00Low() { digitalWriteFast(12, LOW); }
    static void digitalWriteFastDigit00High() { digitalWriteFast(12, HIGH); }
    static void digitalWriteFastDigit01Low() { digitalWriteFast(14, LOW); }
    static void digitalWriteFastDigit01High() { digitalWriteFast(14, HIGH); }
    static void digitalWriteFastDigit02Low() { digitalWriteFast(15, LOW); }
    static void digitalWriteFastDigit02High() { digitalWriteFast(15, HIGH); }
    static void digitalWriteFastDigit03Low() { digitalWriteFast(16, LOW); }
    static void digitalWriteFastDigit03High() { digitalWriteFast(16, HIGH); }
};

#endif

#endif
